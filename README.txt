----------------------------------
PROJECT DESCRIPTION
----------------------------------

This project consists of a Dockerized Flask app set to scrape reviews from Glassdoor using Selenium / Beautiful
Soup, put it into a MySQL database, and gives an option to visualize it within Tableau with some included
templates.

This application prioritizes stable, reliable output over performance and requires a long execution time to prevent
errors related to stale element collection, page loads, and Capticha detection. Capticha detection is still a risk,
but the application is designed to continue execution from the point of failure after it has been encountereds.

----------------------------------
INSTALLATION AND USE - FLASK APP
----------------------------------

Ensure that Docker is installed on host machine by following the instructions in the link below:

# https://docs.docker.com/compose/install/


Configure mysql credential information in the .env file at the root of this repository, optionally
you can also input Glassdoor credentials in the secret.json file inside the GlassdoorScraper directory.
Currently, credentials are not required for app execution but the option has been supported for
resiliency across Glassdoor updates


Change your directory to the root of this project and run:

# docker compose up


This will startup the REST-API, to trigger data collection on a target company you must provide the
base URL of a company's Glassdoor review page alongside a page number to start on (Minimum 1) in a
GET request. The format for this is 

# http://localhost:5000/loadReviews?url=[REVIEW PAGE URL]&page=[STARTING PAGE]


In the current implementation, Capticha occasionally blocks execution of this function. In this case,
the reviews that have already been processed will be imported into the database and a formatted URL 
will be provided to continue execution where it was left off. You must manually resolve the Capticha
and follow the provided URL.

----------------------------------
INSTALLATION AND USE - TABLEAU
----------------------------------

Provided within the TableauTemplates directory are a set of visualizations importable into Tableau meant to enable
analysis of results generated by the Flask App. They can be loaded into Tableau Desktop.


The Density Average Compared by Month workbook is meant to give a general overview review metrics for a specific
company and provides a cross-visualization of both the density and average rating from reviews.

Any spikes in density may be indicitive of a large event happening within the company (layoffs, large bonuses,
etc) or a company attempting to artificially inflate their average rating (High volume of short 5 star reviews)


The Average Rating workbook is a simple graph meant to show trends in review score across time.


You can also add filters on the data source or individual workbooks to trims the analysis from being a general
overview of all reviews in the company to a specific set you are interested in. For example, if you were considering
a software engineering position you might filter for all reviews with "Software Engineer" in the jobtitle that was
posted within the last 5 years.


For all workbooks, you can hover over a data point to view the underlying reviews.

--------------------------------
PLANNED ENHANCEMENTS
--------------------------------

- Implement more sophisticated Capticha prevention strategies (Proxies, rotating user agents)
- Switch to a url based model of searching pages from the current pagination based model
- Use Redis to support parallelism, with configurable worker resource allocations
- Continue to improve stability of Selenium output
- Look for non-proprietary / officially Dockerized alternatives to Tableau for visualizations
- Fold Tableau analysis into this repository by creating / including a Tableau Server image
- Investigate strategies to integrate a pipeline to automatically publish Tableau generated Dashboards to 
Tableau Public on review load completion